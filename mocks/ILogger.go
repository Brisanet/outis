// Code generated by mockery v2.52.2. DO NOT EDIT.

package outismocks

import (
	outis "github.com/Brisanet/outis"
	mock "github.com/stretchr/testify/mock"
)

// ILogger is an autogenerated mock type for the ILogger type
type ILogger struct {
	mock.Mock
}

type ILogger_Expecter struct {
	mock *mock.Mock
}

func (_m *ILogger) EXPECT() *ILogger_Expecter {
	return &ILogger_Expecter{mock: &_m.Mock}
}

// AddField provides a mock function with given fields: key, value
func (_m *ILogger) AddField(key string, value interface{}) outis.ILogger {
	ret := _m.Called(key, value)

	if len(ret) == 0 {
		panic("no return value specified for AddField")
	}

	var r0 outis.ILogger
	if rf, ok := ret.Get(0).(func(string, interface{}) outis.ILogger); ok {
		r0 = rf(key, value)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(outis.ILogger)
		}
	}

	return r0
}

// ILogger_AddField_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddField'
type ILogger_AddField_Call struct {
	*mock.Call
}

// AddField is a helper method to define mock.On call
//   - key string
//   - value interface{}
func (_e *ILogger_Expecter) AddField(key interface{}, value interface{}) *ILogger_AddField_Call {
	return &ILogger_AddField_Call{Call: _e.mock.On("AddField", key, value)}
}

func (_c *ILogger_AddField_Call) Run(run func(key string, value interface{})) *ILogger_AddField_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(interface{}))
	})
	return _c
}

func (_c *ILogger_AddField_Call) Return(_a0 outis.ILogger) *ILogger_AddField_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ILogger_AddField_Call) RunAndReturn(run func(string, interface{}) outis.ILogger) *ILogger_AddField_Call {
	_c.Call.Return(run)
	return _c
}

// AddFields provides a mock function with given fields: fields
func (_m *ILogger) AddFields(fields ...outis.LogFields) outis.ILogger {
	_va := make([]interface{}, len(fields))
	for _i := range fields {
		_va[_i] = fields[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AddFields")
	}

	var r0 outis.ILogger
	if rf, ok := ret.Get(0).(func(...outis.LogFields) outis.ILogger); ok {
		r0 = rf(fields...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(outis.ILogger)
		}
	}

	return r0
}

// ILogger_AddFields_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddFields'
type ILogger_AddFields_Call struct {
	*mock.Call
}

// AddFields is a helper method to define mock.On call
//   - fields ...outis.LogFields
func (_e *ILogger_Expecter) AddFields(fields ...interface{}) *ILogger_AddFields_Call {
	return &ILogger_AddFields_Call{Call: _e.mock.On("AddFields",
		append([]interface{}{}, fields...)...)}
}

func (_c *ILogger_AddFields_Call) Run(run func(fields ...outis.LogFields)) *ILogger_AddFields_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]outis.LogFields, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(outis.LogFields)
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *ILogger_AddFields_Call) Return(_a0 outis.ILogger) *ILogger_AddFields_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ILogger_AddFields_Call) RunAndReturn(run func(...outis.LogFields) outis.ILogger) *ILogger_AddFields_Call {
	_c.Call.Return(run)
	return _c
}

// Debug provides a mock function with given fields: msg, fields
func (_m *ILogger) Debug(msg string, fields ...outis.LogFields) {
	_va := make([]interface{}, len(fields))
	for _i := range fields {
		_va[_i] = fields[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, msg)
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// ILogger_Debug_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Debug'
type ILogger_Debug_Call struct {
	*mock.Call
}

// Debug is a helper method to define mock.On call
//   - msg string
//   - fields ...outis.LogFields
func (_e *ILogger_Expecter) Debug(msg interface{}, fields ...interface{}) *ILogger_Debug_Call {
	return &ILogger_Debug_Call{Call: _e.mock.On("Debug",
		append([]interface{}{msg}, fields...)...)}
}

func (_c *ILogger_Debug_Call) Run(run func(msg string, fields ...outis.LogFields)) *ILogger_Debug_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]outis.LogFields, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(outis.LogFields)
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *ILogger_Debug_Call) Return() *ILogger_Debug_Call {
	_c.Call.Return()
	return _c
}

func (_c *ILogger_Debug_Call) RunAndReturn(run func(string, ...outis.LogFields)) *ILogger_Debug_Call {
	_c.Run(run)
	return _c
}

// Error provides a mock function with given fields: erro, fields
func (_m *ILogger) Error(erro error, fields ...outis.LogFields) {
	_va := make([]interface{}, len(fields))
	for _i := range fields {
		_va[_i] = fields[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, erro)
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// ILogger_Error_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Error'
type ILogger_Error_Call struct {
	*mock.Call
}

// Error is a helper method to define mock.On call
//   - erro error
//   - fields ...outis.LogFields
func (_e *ILogger_Expecter) Error(erro interface{}, fields ...interface{}) *ILogger_Error_Call {
	return &ILogger_Error_Call{Call: _e.mock.On("Error",
		append([]interface{}{erro}, fields...)...)}
}

func (_c *ILogger_Error_Call) Run(run func(erro error, fields ...outis.LogFields)) *ILogger_Error_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]outis.LogFields, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(outis.LogFields)
			}
		}
		run(args[0].(error), variadicArgs...)
	})
	return _c
}

func (_c *ILogger_Error_Call) Return() *ILogger_Error_Call {
	_c.Call.Return()
	return _c
}

func (_c *ILogger_Error_Call) RunAndReturn(run func(error, ...outis.LogFields)) *ILogger_Error_Call {
	_c.Run(run)
	return _c
}

// ErrorMsg provides a mock function with given fields: errorMsg, fields
func (_m *ILogger) ErrorMsg(errorMsg string, fields ...outis.LogFields) {
	_va := make([]interface{}, len(fields))
	for _i := range fields {
		_va[_i] = fields[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, errorMsg)
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// ILogger_ErrorMsg_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ErrorMsg'
type ILogger_ErrorMsg_Call struct {
	*mock.Call
}

// ErrorMsg is a helper method to define mock.On call
//   - errorMsg string
//   - fields ...outis.LogFields
func (_e *ILogger_Expecter) ErrorMsg(errorMsg interface{}, fields ...interface{}) *ILogger_ErrorMsg_Call {
	return &ILogger_ErrorMsg_Call{Call: _e.mock.On("ErrorMsg",
		append([]interface{}{errorMsg}, fields...)...)}
}

func (_c *ILogger_ErrorMsg_Call) Run(run func(errorMsg string, fields ...outis.LogFields)) *ILogger_ErrorMsg_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]outis.LogFields, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(outis.LogFields)
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *ILogger_ErrorMsg_Call) Return() *ILogger_ErrorMsg_Call {
	_c.Call.Return()
	return _c
}

func (_c *ILogger_ErrorMsg_Call) RunAndReturn(run func(string, ...outis.LogFields)) *ILogger_ErrorMsg_Call {
	_c.Run(run)
	return _c
}

// Fatal provides a mock function with given fields: msg, fields
func (_m *ILogger) Fatal(msg string, fields ...outis.LogFields) {
	_va := make([]interface{}, len(fields))
	for _i := range fields {
		_va[_i] = fields[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, msg)
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// ILogger_Fatal_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Fatal'
type ILogger_Fatal_Call struct {
	*mock.Call
}

// Fatal is a helper method to define mock.On call
//   - msg string
//   - fields ...outis.LogFields
func (_e *ILogger_Expecter) Fatal(msg interface{}, fields ...interface{}) *ILogger_Fatal_Call {
	return &ILogger_Fatal_Call{Call: _e.mock.On("Fatal",
		append([]interface{}{msg}, fields...)...)}
}

func (_c *ILogger_Fatal_Call) Run(run func(msg string, fields ...outis.LogFields)) *ILogger_Fatal_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]outis.LogFields, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(outis.LogFields)
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *ILogger_Fatal_Call) Return() *ILogger_Fatal_Call {
	_c.Call.Return()
	return _c
}

func (_c *ILogger_Fatal_Call) RunAndReturn(run func(string, ...outis.LogFields)) *ILogger_Fatal_Call {
	_c.Run(run)
	return _c
}

// Info provides a mock function with given fields: msg, fields
func (_m *ILogger) Info(msg string, fields ...outis.LogFields) {
	_va := make([]interface{}, len(fields))
	for _i := range fields {
		_va[_i] = fields[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, msg)
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// ILogger_Info_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Info'
type ILogger_Info_Call struct {
	*mock.Call
}

// Info is a helper method to define mock.On call
//   - msg string
//   - fields ...outis.LogFields
func (_e *ILogger_Expecter) Info(msg interface{}, fields ...interface{}) *ILogger_Info_Call {
	return &ILogger_Info_Call{Call: _e.mock.On("Info",
		append([]interface{}{msg}, fields...)...)}
}

func (_c *ILogger_Info_Call) Run(run func(msg string, fields ...outis.LogFields)) *ILogger_Info_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]outis.LogFields, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(outis.LogFields)
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *ILogger_Info_Call) Return() *ILogger_Info_Call {
	_c.Call.Return()
	return _c
}

func (_c *ILogger_Info_Call) RunAndReturn(run func(string, ...outis.LogFields)) *ILogger_Info_Call {
	_c.Run(run)
	return _c
}

// Level provides a mock function with no fields
func (_m *ILogger) Level() outis.LogLevel {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Level")
	}

	var r0 outis.LogLevel
	if rf, ok := ret.Get(0).(func() outis.LogLevel); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(outis.LogLevel)
	}

	return r0
}

// ILogger_Level_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Level'
type ILogger_Level_Call struct {
	*mock.Call
}

// Level is a helper method to define mock.On call
func (_e *ILogger_Expecter) Level() *ILogger_Level_Call {
	return &ILogger_Level_Call{Call: _e.mock.On("Level")}
}

func (_c *ILogger_Level_Call) Run(run func()) *ILogger_Level_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ILogger_Level_Call) Return(_a0 outis.LogLevel) *ILogger_Level_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ILogger_Level_Call) RunAndReturn(run func() outis.LogLevel) *ILogger_Level_Call {
	_c.Call.Return(run)
	return _c
}

// Panic provides a mock function with given fields: msg, fields
func (_m *ILogger) Panic(msg string, fields ...outis.LogFields) {
	_va := make([]interface{}, len(fields))
	for _i := range fields {
		_va[_i] = fields[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, msg)
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// ILogger_Panic_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Panic'
type ILogger_Panic_Call struct {
	*mock.Call
}

// Panic is a helper method to define mock.On call
//   - msg string
//   - fields ...outis.LogFields
func (_e *ILogger_Expecter) Panic(msg interface{}, fields ...interface{}) *ILogger_Panic_Call {
	return &ILogger_Panic_Call{Call: _e.mock.On("Panic",
		append([]interface{}{msg}, fields...)...)}
}

func (_c *ILogger_Panic_Call) Run(run func(msg string, fields ...outis.LogFields)) *ILogger_Panic_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]outis.LogFields, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(outis.LogFields)
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *ILogger_Panic_Call) Return() *ILogger_Panic_Call {
	_c.Call.Return()
	return _c
}

func (_c *ILogger_Panic_Call) RunAndReturn(run func(string, ...outis.LogFields)) *ILogger_Panic_Call {
	_c.Run(run)
	return _c
}

// Warn provides a mock function with given fields: msg, fields
func (_m *ILogger) Warn(msg string, fields ...outis.LogFields) {
	_va := make([]interface{}, len(fields))
	for _i := range fields {
		_va[_i] = fields[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, msg)
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// ILogger_Warn_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Warn'
type ILogger_Warn_Call struct {
	*mock.Call
}

// Warn is a helper method to define mock.On call
//   - msg string
//   - fields ...outis.LogFields
func (_e *ILogger_Expecter) Warn(msg interface{}, fields ...interface{}) *ILogger_Warn_Call {
	return &ILogger_Warn_Call{Call: _e.mock.On("Warn",
		append([]interface{}{msg}, fields...)...)}
}

func (_c *ILogger_Warn_Call) Run(run func(msg string, fields ...outis.LogFields)) *ILogger_Warn_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]outis.LogFields, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(outis.LogFields)
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *ILogger_Warn_Call) Return() *ILogger_Warn_Call {
	_c.Call.Return()
	return _c
}

func (_c *ILogger_Warn_Call) RunAndReturn(run func(string, ...outis.LogFields)) *ILogger_Warn_Call {
	_c.Run(run)
	return _c
}

// NewILogger creates a new instance of ILogger. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewILogger(t interface {
	mock.TestingT
	Cleanup(func())
}) *ILogger {
	mock := &ILogger{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
