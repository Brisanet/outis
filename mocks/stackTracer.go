// Code generated by mockery v2.52.2. DO NOT EDIT.

package outismocks

import (
	errors "github.com/pkg/errors"
	mock "github.com/stretchr/testify/mock"
)

// stackTracer is an autogenerated mock type for the stackTracer type
type stackTracer struct {
	mock.Mock
}

type stackTracer_Expecter struct {
	mock *mock.Mock
}

func (_m *stackTracer) EXPECT() *stackTracer_Expecter {
	return &stackTracer_Expecter{mock: &_m.Mock}
}

// StackTrace provides a mock function with no fields
func (_m *stackTracer) StackTrace() errors.StackTrace {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for StackTrace")
	}

	var r0 errors.StackTrace
	if rf, ok := ret.Get(0).(func() errors.StackTrace); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.StackTrace)
		}
	}

	return r0
}

// stackTracer_StackTrace_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StackTrace'
type stackTracer_StackTrace_Call struct {
	*mock.Call
}

// StackTrace is a helper method to define mock.On call
func (_e *stackTracer_Expecter) StackTrace() *stackTracer_StackTrace_Call {
	return &stackTracer_StackTrace_Call{Call: _e.mock.On("StackTrace")}
}

func (_c *stackTracer_StackTrace_Call) Run(run func()) *stackTracer_StackTrace_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *stackTracer_StackTrace_Call) Return(_a0 errors.StackTrace) *stackTracer_StackTrace_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *stackTracer_StackTrace_Call) RunAndReturn(run func() errors.StackTrace) *stackTracer_StackTrace_Call {
	_c.Call.Return(run)
	return _c
}

// newStackTracer creates a new instance of stackTracer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newStackTracer(t interface {
	mock.TestingT
	Cleanup(func())
}) *stackTracer {
	mock := &stackTracer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
