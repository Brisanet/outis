// Code generated by mockery v2.52.2. DO NOT EDIT.

package outismocks

import (
	context "context"

	outis "github.com/Brisanet/outis"
	mock "github.com/stretchr/testify/mock"
)

// Context is an autogenerated mock type for the Context type
type Context struct {
	mock.Mock
}

type Context_Expecter struct {
	mock *mock.Mock
}

func (_m *Context) EXPECT() *Context_Expecter {
	return &Context_Expecter{mock: &_m.Mock}
}

// AddMetadata provides a mock function with given fields: metadata
func (_m *Context) AddMetadata(metadata outis.Metadata) outis.Context {
	ret := _m.Called(metadata)

	if len(ret) == 0 {
		panic("no return value specified for AddMetadata")
	}

	var r0 outis.Context
	if rf, ok := ret.Get(0).(func(outis.Metadata) outis.Context); ok {
		r0 = rf(metadata)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(outis.Context)
		}
	}

	return r0
}

// Context_AddMetadata_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddMetadata'
type Context_AddMetadata_Call struct {
	*mock.Call
}

// AddMetadata is a helper method to define mock.On call
//   - metadata outis.Metadata
func (_e *Context_Expecter) AddMetadata(metadata interface{}) *Context_AddMetadata_Call {
	return &Context_AddMetadata_Call{Call: _e.mock.On("AddMetadata", metadata)}
}

func (_c *Context_AddMetadata_Call) Run(run func(metadata outis.Metadata)) *Context_AddMetadata_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(outis.Metadata))
	})
	return _c
}

func (_c *Context_AddMetadata_Call) Return(_a0 outis.Context) *Context_AddMetadata_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Context_AddMetadata_Call) RunAndReturn(run func(outis.Metadata) outis.Context) *Context_AddMetadata_Call {
	_c.Call.Return(run)
	return _c
}

// AddSingleMetadata provides a mock function with given fields: key, args
func (_m *Context) AddSingleMetadata(key string, args interface{}) outis.Context {
	ret := _m.Called(key, args)

	if len(ret) == 0 {
		panic("no return value specified for AddSingleMetadata")
	}

	var r0 outis.Context
	if rf, ok := ret.Get(0).(func(string, interface{}) outis.Context); ok {
		r0 = rf(key, args)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(outis.Context)
		}
	}

	return r0
}

// Context_AddSingleMetadata_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddSingleMetadata'
type Context_AddSingleMetadata_Call struct {
	*mock.Call
}

// AddSingleMetadata is a helper method to define mock.On call
//   - key string
//   - args interface{}
func (_e *Context_Expecter) AddSingleMetadata(key interface{}, args interface{}) *Context_AddSingleMetadata_Call {
	return &Context_AddSingleMetadata_Call{Call: _e.mock.On("AddSingleMetadata", key, args)}
}

func (_c *Context_AddSingleMetadata_Call) Run(run func(key string, args interface{})) *Context_AddSingleMetadata_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(interface{}))
	})
	return _c
}

func (_c *Context_AddSingleMetadata_Call) Return(_a0 outis.Context) *Context_AddSingleMetadata_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Context_AddSingleMetadata_Call) RunAndReturn(run func(string, interface{}) outis.Context) *Context_AddSingleMetadata_Call {
	_c.Call.Return(run)
	return _c
}

// Cancel provides a mock function with no fields
func (_m *Context) Cancel() {
	_m.Called()
}

// Context_Cancel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Cancel'
type Context_Cancel_Call struct {
	*mock.Call
}

// Cancel is a helper method to define mock.On call
func (_e *Context_Expecter) Cancel() *Context_Cancel_Call {
	return &Context_Cancel_Call{Call: _e.mock.On("Cancel")}
}

func (_c *Context_Cancel_Call) Run(run func()) *Context_Cancel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Context_Cancel_Call) Return() *Context_Cancel_Call {
	_c.Call.Return()
	return _c
}

func (_c *Context_Cancel_Call) RunAndReturn(run func()) *Context_Cancel_Call {
	_c.Run(run)
	return _c
}

// Context provides a mock function with no fields
func (_m *Context) Context() context.Context {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Context")
	}

	var r0 context.Context
	if rf, ok := ret.Get(0).(func() context.Context); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(context.Context)
		}
	}

	return r0
}

// Context_Context_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Context'
type Context_Context_Call struct {
	*mock.Call
}

// Context is a helper method to define mock.On call
func (_e *Context_Expecter) Context() *Context_Context_Call {
	return &Context_Context_Call{Call: _e.mock.On("Context")}
}

func (_c *Context_Context_Call) Run(run func()) *Context_Context_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Context_Context_Call) Return(_a0 context.Context) *Context_Context_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Context_Context_Call) RunAndReturn(run func() context.Context) *Context_Context_Call {
	_c.Call.Return(run)
	return _c
}

// Copy provides a mock function with given fields: baseCtxIn
func (_m *Context) Copy(baseCtxIn ...context.Context) outis.Context {
	_va := make([]interface{}, len(baseCtxIn))
	for _i := range baseCtxIn {
		_va[_i] = baseCtxIn[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Copy")
	}

	var r0 outis.Context
	if rf, ok := ret.Get(0).(func(...context.Context) outis.Context); ok {
		r0 = rf(baseCtxIn...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(outis.Context)
		}
	}

	return r0
}

// Context_Copy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Copy'
type Context_Copy_Call struct {
	*mock.Call
}

// Copy is a helper method to define mock.On call
//   - baseCtxIn ...context.Context
func (_e *Context_Expecter) Copy(baseCtxIn ...interface{}) *Context_Copy_Call {
	return &Context_Copy_Call{Call: _e.mock.On("Copy",
		append([]interface{}{}, baseCtxIn...)...)}
}

func (_c *Context_Copy_Call) Run(run func(baseCtxIn ...context.Context)) *Context_Copy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]context.Context, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(context.Context)
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *Context_Copy_Call) Return(_a0 outis.Context) *Context_Copy_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Context_Copy_Call) RunAndReturn(run func(...context.Context) outis.Context) *Context_Copy_Call {
	_c.Call.Return(run)
	return _c
}

// Done provides a mock function with no fields
func (_m *Context) Done() <-chan struct{} {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Done")
	}

	var r0 <-chan struct{}
	if rf, ok := ret.Get(0).(func() <-chan struct{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan struct{})
		}
	}

	return r0
}

// Context_Done_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Done'
type Context_Done_Call struct {
	*mock.Call
}

// Done is a helper method to define mock.On call
func (_e *Context_Expecter) Done() *Context_Done_Call {
	return &Context_Done_Call{Call: _e.mock.On("Done")}
}

func (_c *Context_Done_Call) Run(run func()) *Context_Done_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Context_Done_Call) Return(_a0 <-chan struct{}) *Context_Done_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Context_Done_Call) RunAndReturn(run func() <-chan struct{}) *Context_Done_Call {
	_c.Call.Return(run)
	return _c
}

// Err provides a mock function with no fields
func (_m *Context) Err() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Err")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Context_Err_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Err'
type Context_Err_Call struct {
	*mock.Call
}

// Err is a helper method to define mock.On call
func (_e *Context_Expecter) Err() *Context_Err_Call {
	return &Context_Err_Call{Call: _e.mock.On("Err")}
}

func (_c *Context_Err_Call) Run(run func()) *Context_Err_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Context_Err_Call) Return(_a0 error) *Context_Err_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Context_Err_Call) RunAndReturn(run func() error) *Context_Err_Call {
	_c.Call.Return(run)
	return _c
}

// GetLatency provides a mock function with no fields
func (_m *Context) GetLatency() float64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetLatency")
	}

	var r0 float64
	if rf, ok := ret.Get(0).(func() float64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(float64)
	}

	return r0
}

// Context_GetLatency_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLatency'
type Context_GetLatency_Call struct {
	*mock.Call
}

// GetLatency is a helper method to define mock.On call
func (_e *Context_Expecter) GetLatency() *Context_GetLatency_Call {
	return &Context_GetLatency_Call{Call: _e.mock.On("GetLatency")}
}

func (_c *Context_GetLatency_Call) Run(run func()) *Context_GetLatency_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Context_GetLatency_Call) Return(_a0 float64) *Context_GetLatency_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Context_GetLatency_Call) RunAndReturn(run func() float64) *Context_GetLatency_Call {
	_c.Call.Return(run)
	return _c
}

// ID provides a mock function with no fields
func (_m *Context) ID() outis.ID {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ID")
	}

	var r0 outis.ID
	if rf, ok := ret.Get(0).(func() outis.ID); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(outis.ID)
	}

	return r0
}

// Context_ID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ID'
type Context_ID_Call struct {
	*mock.Call
}

// ID is a helper method to define mock.On call
func (_e *Context_Expecter) ID() *Context_ID_Call {
	return &Context_ID_Call{Call: _e.mock.On("ID")}
}

func (_c *Context_ID_Call) Run(run func()) *Context_ID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Context_ID_Call) Return(_a0 outis.ID) *Context_ID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Context_ID_Call) RunAndReturn(run func() outis.ID) *Context_ID_Call {
	_c.Call.Return(run)
	return _c
}

// LogDebug provides a mock function with given fields: msg, fields
func (_m *Context) LogDebug(msg string, fields ...outis.LogFields) {
	_va := make([]interface{}, len(fields))
	for _i := range fields {
		_va[_i] = fields[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, msg)
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// Context_LogDebug_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LogDebug'
type Context_LogDebug_Call struct {
	*mock.Call
}

// LogDebug is a helper method to define mock.On call
//   - msg string
//   - fields ...outis.LogFields
func (_e *Context_Expecter) LogDebug(msg interface{}, fields ...interface{}) *Context_LogDebug_Call {
	return &Context_LogDebug_Call{Call: _e.mock.On("LogDebug",
		append([]interface{}{msg}, fields...)...)}
}

func (_c *Context_LogDebug_Call) Run(run func(msg string, fields ...outis.LogFields)) *Context_LogDebug_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]outis.LogFields, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(outis.LogFields)
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *Context_LogDebug_Call) Return() *Context_LogDebug_Call {
	_c.Call.Return()
	return _c
}

func (_c *Context_LogDebug_Call) RunAndReturn(run func(string, ...outis.LogFields)) *Context_LogDebug_Call {
	_c.Run(run)
	return _c
}

// LogError provides a mock function with given fields: err, fields
func (_m *Context) LogError(err error, fields ...outis.LogFields) {
	_va := make([]interface{}, len(fields))
	for _i := range fields {
		_va[_i] = fields[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, err)
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// Context_LogError_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LogError'
type Context_LogError_Call struct {
	*mock.Call
}

// LogError is a helper method to define mock.On call
//   - err error
//   - fields ...outis.LogFields
func (_e *Context_Expecter) LogError(err interface{}, fields ...interface{}) *Context_LogError_Call {
	return &Context_LogError_Call{Call: _e.mock.On("LogError",
		append([]interface{}{err}, fields...)...)}
}

func (_c *Context_LogError_Call) Run(run func(err error, fields ...outis.LogFields)) *Context_LogError_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]outis.LogFields, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(outis.LogFields)
			}
		}
		run(args[0].(error), variadicArgs...)
	})
	return _c
}

func (_c *Context_LogError_Call) Return() *Context_LogError_Call {
	_c.Call.Return()
	return _c
}

func (_c *Context_LogError_Call) RunAndReturn(run func(error, ...outis.LogFields)) *Context_LogError_Call {
	_c.Run(run)
	return _c
}

// LogErrorMsg provides a mock function with given fields: msg, fields
func (_m *Context) LogErrorMsg(msg string, fields ...outis.LogFields) {
	_va := make([]interface{}, len(fields))
	for _i := range fields {
		_va[_i] = fields[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, msg)
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// Context_LogErrorMsg_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LogErrorMsg'
type Context_LogErrorMsg_Call struct {
	*mock.Call
}

// LogErrorMsg is a helper method to define mock.On call
//   - msg string
//   - fields ...outis.LogFields
func (_e *Context_Expecter) LogErrorMsg(msg interface{}, fields ...interface{}) *Context_LogErrorMsg_Call {
	return &Context_LogErrorMsg_Call{Call: _e.mock.On("LogErrorMsg",
		append([]interface{}{msg}, fields...)...)}
}

func (_c *Context_LogErrorMsg_Call) Run(run func(msg string, fields ...outis.LogFields)) *Context_LogErrorMsg_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]outis.LogFields, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(outis.LogFields)
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *Context_LogErrorMsg_Call) Return() *Context_LogErrorMsg_Call {
	_c.Call.Return()
	return _c
}

func (_c *Context_LogErrorMsg_Call) RunAndReturn(run func(string, ...outis.LogFields)) *Context_LogErrorMsg_Call {
	_c.Run(run)
	return _c
}

// LogFatal provides a mock function with given fields: msg, fields
func (_m *Context) LogFatal(msg string, fields ...outis.LogFields) {
	_va := make([]interface{}, len(fields))
	for _i := range fields {
		_va[_i] = fields[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, msg)
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// Context_LogFatal_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LogFatal'
type Context_LogFatal_Call struct {
	*mock.Call
}

// LogFatal is a helper method to define mock.On call
//   - msg string
//   - fields ...outis.LogFields
func (_e *Context_Expecter) LogFatal(msg interface{}, fields ...interface{}) *Context_LogFatal_Call {
	return &Context_LogFatal_Call{Call: _e.mock.On("LogFatal",
		append([]interface{}{msg}, fields...)...)}
}

func (_c *Context_LogFatal_Call) Run(run func(msg string, fields ...outis.LogFields)) *Context_LogFatal_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]outis.LogFields, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(outis.LogFields)
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *Context_LogFatal_Call) Return() *Context_LogFatal_Call {
	_c.Call.Return()
	return _c
}

func (_c *Context_LogFatal_Call) RunAndReturn(run func(string, ...outis.LogFields)) *Context_LogFatal_Call {
	_c.Run(run)
	return _c
}

// LogInfo provides a mock function with given fields: msg, fields
func (_m *Context) LogInfo(msg string, fields ...outis.LogFields) {
	_va := make([]interface{}, len(fields))
	for _i := range fields {
		_va[_i] = fields[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, msg)
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// Context_LogInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LogInfo'
type Context_LogInfo_Call struct {
	*mock.Call
}

// LogInfo is a helper method to define mock.On call
//   - msg string
//   - fields ...outis.LogFields
func (_e *Context_Expecter) LogInfo(msg interface{}, fields ...interface{}) *Context_LogInfo_Call {
	return &Context_LogInfo_Call{Call: _e.mock.On("LogInfo",
		append([]interface{}{msg}, fields...)...)}
}

func (_c *Context_LogInfo_Call) Run(run func(msg string, fields ...outis.LogFields)) *Context_LogInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]outis.LogFields, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(outis.LogFields)
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *Context_LogInfo_Call) Return() *Context_LogInfo_Call {
	_c.Call.Return()
	return _c
}

func (_c *Context_LogInfo_Call) RunAndReturn(run func(string, ...outis.LogFields)) *Context_LogInfo_Call {
	_c.Run(run)
	return _c
}

// LogPanic provides a mock function with given fields: msg, fields
func (_m *Context) LogPanic(msg string, fields ...outis.LogFields) {
	_va := make([]interface{}, len(fields))
	for _i := range fields {
		_va[_i] = fields[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, msg)
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// Context_LogPanic_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LogPanic'
type Context_LogPanic_Call struct {
	*mock.Call
}

// LogPanic is a helper method to define mock.On call
//   - msg string
//   - fields ...outis.LogFields
func (_e *Context_Expecter) LogPanic(msg interface{}, fields ...interface{}) *Context_LogPanic_Call {
	return &Context_LogPanic_Call{Call: _e.mock.On("LogPanic",
		append([]interface{}{msg}, fields...)...)}
}

func (_c *Context_LogPanic_Call) Run(run func(msg string, fields ...outis.LogFields)) *Context_LogPanic_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]outis.LogFields, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(outis.LogFields)
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *Context_LogPanic_Call) Return() *Context_LogPanic_Call {
	_c.Call.Return()
	return _c
}

func (_c *Context_LogPanic_Call) RunAndReturn(run func(string, ...outis.LogFields)) *Context_LogPanic_Call {
	_c.Run(run)
	return _c
}

// LogWarn provides a mock function with given fields: msg, fields
func (_m *Context) LogWarn(msg string, fields ...outis.LogFields) {
	_va := make([]interface{}, len(fields))
	for _i := range fields {
		_va[_i] = fields[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, msg)
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// Context_LogWarn_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LogWarn'
type Context_LogWarn_Call struct {
	*mock.Call
}

// LogWarn is a helper method to define mock.On call
//   - msg string
//   - fields ...outis.LogFields
func (_e *Context_Expecter) LogWarn(msg interface{}, fields ...interface{}) *Context_LogWarn_Call {
	return &Context_LogWarn_Call{Call: _e.mock.On("LogWarn",
		append([]interface{}{msg}, fields...)...)}
}

func (_c *Context_LogWarn_Call) Run(run func(msg string, fields ...outis.LogFields)) *Context_LogWarn_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]outis.LogFields, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(outis.LogFields)
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *Context_LogWarn_Call) Return() *Context_LogWarn_Call {
	_c.Call.Return()
	return _c
}

func (_c *Context_LogWarn_Call) RunAndReturn(run func(string, ...outis.LogFields)) *Context_LogWarn_Call {
	_c.Run(run)
	return _c
}

// Name provides a mock function with no fields
func (_m *Context) Name() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Name")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Context_Name_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Name'
type Context_Name_Call struct {
	*mock.Call
}

// Name is a helper method to define mock.On call
func (_e *Context_Expecter) Name() *Context_Name_Call {
	return &Context_Name_Call{Call: _e.mock.On("Name")}
}

func (_c *Context_Name_Call) Run(run func()) *Context_Name_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Context_Name_Call) Return(_a0 string) *Context_Name_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Context_Name_Call) RunAndReturn(run func() string) *Context_Name_Call {
	_c.Call.Return(run)
	return _c
}

// RoutineID provides a mock function with no fields
func (_m *Context) RoutineID() outis.ID {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for RoutineID")
	}

	var r0 outis.ID
	if rf, ok := ret.Get(0).(func() outis.ID); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(outis.ID)
	}

	return r0
}

// Context_RoutineID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RoutineID'
type Context_RoutineID_Call struct {
	*mock.Call
}

// RoutineID is a helper method to define mock.On call
func (_e *Context_Expecter) RoutineID() *Context_RoutineID_Call {
	return &Context_RoutineID_Call{Call: _e.mock.On("RoutineID")}
}

func (_c *Context_RoutineID_Call) Run(run func()) *Context_RoutineID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Context_RoutineID_Call) Return(_a0 outis.ID) *Context_RoutineID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Context_RoutineID_Call) RunAndReturn(run func() outis.ID) *Context_RoutineID_Call {
	_c.Call.Return(run)
	return _c
}

// NewContext creates a new instance of Context. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewContext(t interface {
	mock.TestingT
	Cleanup(func())
}) *Context {
	mock := &Context{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
