// Code generated by mockery v2.52.2. DO NOT EDIT.

package outismocks

import (
	outis "github.com/Brisanet/outis"
	mock "github.com/stretchr/testify/mock"
)

// IntervalOpts is an autogenerated mock type for the IntervalOpts type
type IntervalOpts struct {
	mock.Mock
}

type IntervalOpts_Expecter struct {
	mock *mock.Mock
}

func (_m *IntervalOpts) EXPECT() *IntervalOpts_Expecter {
	return &IntervalOpts_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: interval
func (_m *IntervalOpts) Execute(interval *outis.Interval) {
	_m.Called(interval)
}

// IntervalOpts_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type IntervalOpts_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - interval *outis.Interval
func (_e *IntervalOpts_Expecter) Execute(interval interface{}) *IntervalOpts_Execute_Call {
	return &IntervalOpts_Execute_Call{Call: _e.mock.On("Execute", interval)}
}

func (_c *IntervalOpts_Execute_Call) Run(run func(interval *outis.Interval)) *IntervalOpts_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*outis.Interval))
	})
	return _c
}

func (_c *IntervalOpts_Execute_Call) Return() *IntervalOpts_Execute_Call {
	_c.Call.Return()
	return _c
}

func (_c *IntervalOpts_Execute_Call) RunAndReturn(run func(*outis.Interval)) *IntervalOpts_Execute_Call {
	_c.Run(run)
	return _c
}

// NewIntervalOpts creates a new instance of IntervalOpts. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIntervalOpts(t interface {
	mock.TestingT
	Cleanup(func())
}) *IntervalOpts {
	mock := &IntervalOpts{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
