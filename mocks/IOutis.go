// Code generated by mockery v2.52.2. DO NOT EDIT.

package outismocks

import (
	outis "github.com/Brisanet/outis"
	mock "github.com/stretchr/testify/mock"
)

// IOutis is an autogenerated mock type for the IOutis type
type IOutis struct {
	mock.Mock
}

type IOutis_Expecter struct {
	mock *mock.Mock
}

func (_m *IOutis) EXPECT() *IOutis_Expecter {
	return &IOutis_Expecter{mock: &_m.Mock}
}

// After provides a mock function with given fields: ctx
func (_m *IOutis) After(ctx outis.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for After")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(outis.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IOutis_After_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'After'
type IOutis_After_Call struct {
	*mock.Call
}

// After is a helper method to define mock.On call
//   - ctx outis.Context
func (_e *IOutis_Expecter) After(ctx interface{}) *IOutis_After_Call {
	return &IOutis_After_Call{Call: _e.mock.On("After", ctx)}
}

func (_c *IOutis_After_Call) Run(run func(ctx outis.Context)) *IOutis_After_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(outis.Context))
	})
	return _c
}

func (_c *IOutis_After_Call) Return(_a0 error) *IOutis_After_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IOutis_After_Call) RunAndReturn(run func(outis.Context) error) *IOutis_After_Call {
	_c.Call.Return(run)
	return _c
}

// Before provides a mock function with given fields: ctx
func (_m *IOutis) Before(ctx outis.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Before")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(outis.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IOutis_Before_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Before'
type IOutis_Before_Call struct {
	*mock.Call
}

// Before is a helper method to define mock.On call
//   - ctx outis.Context
func (_e *IOutis_Expecter) Before(ctx interface{}) *IOutis_Before_Call {
	return &IOutis_Before_Call{Call: _e.mock.On("Before", ctx)}
}

func (_c *IOutis_Before_Call) Run(run func(ctx outis.Context)) *IOutis_Before_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(outis.Context))
	})
	return _c
}

func (_c *IOutis_Before_Call) Return(_a0 error) *IOutis_Before_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IOutis_Before_Call) RunAndReturn(run func(outis.Context) error) *IOutis_Before_Call {
	_c.Call.Return(run)
	return _c
}

// Event provides a mock function with given fields: ctx, event
func (_m *IOutis) Event(ctx outis.Context, event outis.Event) {
	_m.Called(ctx, event)
}

// IOutis_Event_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Event'
type IOutis_Event_Call struct {
	*mock.Call
}

// Event is a helper method to define mock.On call
//   - ctx outis.Context
//   - event outis.Event
func (_e *IOutis_Expecter) Event(ctx interface{}, event interface{}) *IOutis_Event_Call {
	return &IOutis_Event_Call{Call: _e.mock.On("Event", ctx, event)}
}

func (_c *IOutis_Event_Call) Run(run func(ctx outis.Context, event outis.Event)) *IOutis_Event_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(outis.Context), args[1].(outis.Event))
	})
	return _c
}

func (_c *IOutis_Event_Call) Return() *IOutis_Event_Call {
	_c.Call.Return()
	return _c
}

func (_c *IOutis_Event_Call) RunAndReturn(run func(outis.Context, outis.Event)) *IOutis_Event_Call {
	_c.Run(run)
	return _c
}

// Go provides a mock function with given fields: fn
func (_m *IOutis) Go(fn func() error) {
	_m.Called(fn)
}

// IOutis_Go_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Go'
type IOutis_Go_Call struct {
	*mock.Call
}

// Go is a helper method to define mock.On call
//   - fn func() error
func (_e *IOutis_Expecter) Go(fn interface{}) *IOutis_Go_Call {
	return &IOutis_Go_Call{Call: _e.mock.On("Go", fn)}
}

func (_c *IOutis_Go_Call) Run(run func(fn func() error)) *IOutis_Go_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func() error))
	})
	return _c
}

func (_c *IOutis_Go_Call) Return() *IOutis_Go_Call {
	_c.Call.Return()
	return _c
}

func (_c *IOutis_Go_Call) RunAndReturn(run func(func() error)) *IOutis_Go_Call {
	_c.Run(run)
	return _c
}

// Init provides a mock function with given fields: ctx
func (_m *IOutis) Init(ctx outis.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Init")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(outis.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IOutis_Init_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Init'
type IOutis_Init_Call struct {
	*mock.Call
}

// Init is a helper method to define mock.On call
//   - ctx outis.Context
func (_e *IOutis_Expecter) Init(ctx interface{}) *IOutis_Init_Call {
	return &IOutis_Init_Call{Call: _e.mock.On("Init", ctx)}
}

func (_c *IOutis_Init_Call) Run(run func(ctx outis.Context)) *IOutis_Init_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(outis.Context))
	})
	return _c
}

func (_c *IOutis_Init_Call) Return(_a0 error) *IOutis_Init_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IOutis_Init_Call) RunAndReturn(run func(outis.Context) error) *IOutis_Init_Call {
	_c.Call.Return(run)
	return _c
}

// Wait provides a mock function with no fields
func (_m *IOutis) Wait() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Wait")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IOutis_Wait_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Wait'
type IOutis_Wait_Call struct {
	*mock.Call
}

// Wait is a helper method to define mock.On call
func (_e *IOutis_Expecter) Wait() *IOutis_Wait_Call {
	return &IOutis_Wait_Call{Call: _e.mock.On("Wait")}
}

func (_c *IOutis_Wait_Call) Run(run func()) *IOutis_Wait_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *IOutis_Wait_Call) Return(_a0 error) *IOutis_Wait_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IOutis_Wait_Call) RunAndReturn(run func() error) *IOutis_Wait_Call {
	_c.Call.Return(run)
	return _c
}

// NewIOutis creates a new instance of IOutis. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIOutis(t interface {
	mock.TestingT
	Cleanup(func())
}) *IOutis {
	mock := &IOutis{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
